#---- begin snakebids boilerplate ----------------------------------------------

from snakebids import bids, generate_inputs, get_wildcard_constraints
import nibabel as nib
import numpy as np

configfile: 'config/snakebids.yml'

# Get input wildcards
inputs = generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybidsdb_dir=config.get("pybidsdb_dir"),
    pybidsdb_reset=config.get("pybidsdb_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
    validate=not config.get("plugins.validator.skip", False)
)

#this adds constraints to the bids naming
wildcard_constraints:  **get_wildcard_constraints(config['pybids_inputs'])

#---- end snakebids boilerplate ------------------------------------------------


rule all:
    input:
        orig_contact_mask = inputs['rigid'].expand(
            bids(
                root=config['output_dir'],
                desc='contacts',
                suffix='mask.nii.gz',
            **inputs['rigid'].wildcards)
        ),
        
        # patches_65 = inputs['rigid'].expand(
        #     bids(
        #         root=config['output_dir'],
        #         suffix='norm_patches65.dat',
        #         res='{res}',
        #         **inputs['rigid'].wildcards),
        #         res=config['res_mm']
        # ),        
        
        # patches_97 = inputs['rigid'].expand(
        #     bids(
        #         root=config['output_dir'],
        #         suffix='norm_patches97.dat',
        #         res='{res}',
        #         **inputs['rigid'].wildcards),
        #         res=config['res_mm']
        # )

# rule reslice_mask:
#     input:
#         mask =  inputs['mask'].path,
#         ct = inputs['rig_ct'].path
    
#     output:
#         resliced_mask = bids(
#             root=config['output_dir'],
#             space = 'T1w',
#             suffix='resliced_brain_mask.nii.gz',
#             **inputs['rigid'].wildcards
#         )

#     group: 'subj'
    
#     container:
#         config["singularity"]["diffparc"]

#     shell: 'c3d {input.ct} {input.mask} -reslice-identity -o {output.resliced_mask}'

    
rule resample:
    input:
        orig_ct =  inputs['ct'].path
    
    params:
        interpolation = 'Cubic',
        dims = '0.6x0.6x0.6mm'
    
    output:
        resampled_ct = bids(
            root=config['output_dir'],
            res='{res}',
            suffix='ct.nii.gz',
            **inputs['rigid'].wildcards
        )

    group: 'subj'
    
    container:
        config["singularity"]["diffparc"]

    shell: 'c3d {input.orig_ct} -interpolation {params.interpolation} -resample-mm {params.dims} -o {output.resampled_ct}'


# def get_rigid_or_affine(wildcards):
#     #have the subject id (wildcards.subject)
#     #want to pick either rigid or affine, depending on which zip list contains the subject
#     if wildcards.subject in inputs['affine'].zip_lists['subject']:
#         return inputs['affine'].path
#     elif wildcards.subject in inputs['rigid'].zip_lists['subject']:
#         return inputs['rigid'].path
#     else:
#         print('subject has neither affine or rigid!')
        

rule transform_points_ct:
    input: 
        orig_point = inputs['landmarks'].path,
        aff = inputs['rigid'].path
    
    output:
        transformed_txt = bids(
            root=config['output_dir'],
            space = 'native_ct',
            suffix='landmarks.txt',
            **inputs['rigid'].wildcards
        )
    
    group: 'subj'

    run:
        import numpy as np
        affine = np.loadtxt(input.aff)
        inv = np.linalg.inv(affine)
        points = np.loadtxt(input.orig_point).T
        transformed_points = np.dot(inv, points)
        np.savetxt(output.transformed_txt, transformed_points.T, fmt='%f')

rule create_resampled_contact_mask:
    input: 
        landmarks = rules.transform_points_ct.output.transformed_txt,
        resampled_ct = rules.resample.output.resampled_ct

    output:
        contact_mask = bids(
            root=config['output_dir'],
            desc='contacts',
            res='{res}',
            suffix='mask.nii.gz',
            **inputs['rigid'].wildcards
        )

    group: 'subj'
    
    container:
        config["singularity"]["diffparc"]
    
    shell: 'c3d {input.resampled_ct} -scale 0 -landmarks-to-spheres {input.landmarks} 1 -o {output.contact_mask}'

rule znormalize_ct:
    input:
        resampled_ct = rules.resample.output.resampled_ct,
    
    output:
        znorm_ct = bids(
            root = config["output_dir"],
            res='{res}',
            desc='z_norm',
            suffix='ct.nii.gz',
            **inputs['rigid'].wildcards
        )

    resources:    
        mem_mb = 10000

    group: 'subj'

    script: 
        './scripts/znormalize_ct.py'

rule create_orig_contact_mask:
    input: 
        landmarks = rules.transform_points_ct.output.transformed_txt,
        ct = inputs['ct'].path

    output:
        contact_mask = bids(
            root=config['output_dir'],
            desc='contacts',
            suffix='mask.nii.gz',
            **inputs['rigid'].wildcards
        )

    group: 'subj'
    
    container:
        config["singularity"]["diffparc"]
    
    shell: 'c3d {input.ct} -scale 0 -landmarks-to-spheres {input.landmarks} 1 -o {output.contact_mask}'


# rule create_electrode_mask:
#     input: 
#         ct = rules.resample.output.resampled_ct,  
#         actual = inputs['actual'].path,
#         transform_matrix = inputs['rigid'].path,

#     output:
#         electrode_mask = bids(
#             root=config['output_dir'],
#             desc='electrode',
#             res='{res}',
#             suffix='mask.nii.gz',
#             **inputs['rigid'].wildcards
#         )

#     group: 'subj'

#     resources:    
#         mem_mb = 32000
    
#     script: 
#         './scripts/electrode_mask_creation.py'


# rule create_patches:
#     input:
#         ct = rules.znormalize_ct.output.znorm_ct,
#         contact_mask = rules.create_resampled_contact_mask.output.contact_mask,
#         electrode_mask = rules.create_electrode_mask.output.electrode_mask
#         #will update to binary brain mask
    
#     params:
#         radius_vector = '48x48x48', #patch dimensions will be (x*2)+1 voxels
#         n = '2', #sample n randomly augment patches
#         angle = '30', #stdev of normal distribution for sampling angle (in degrees)
#         frequency = '14000' #sample 1 patch for every n voxels

#     output:
#         patches_97 = bids(
#             root=config['output_dir'],
#             res='{res}',
#             suffix='norm_patches97.dat',
#             **inputs['rigid'].wildcards
#         )

#     resources:    
#         mem_mb = 32000
    
#     group: 'subj'

#     container:
#         config["singularity"]["diffparc"]

#     shell: 'c3d {input.ct} {input.contact_mask} {input.electrode_mask} -xpa {params.n} {params.angle} -xp {output.patches_97} {params.radius_vector} {params.frequency}'

# rule create_patches_64:
#     input:
#         ct = rules.znormalize_ct.output.znorm_ct,
#         contact_mask = rules.create_resampled_contact_mask.output.contact_mask,
#         electrode_mask = rules.create_electrode_mask.output.electrode_mask

#         #will update to binary brain mask
    
#     params:
#         radius_vector = '32x32x32', #patch dimensions will be (x*2)+1 voxels
#         n = '2', #sample n randomly augment patches
#         angle = '30', #stdev of normal distribution for sampling angle (in degrees)
#         frequency = '12000' #sample 1 patch for every n voxels

#     output:
#         patches_65 = bids(
#             root=config['output_dir'],
#             res='{res}',
#             suffix='norm_patches65.dat',
#             **inputs['rigid'].wildcards
#         )

#     resources:    
#         mem_mb = 32000
    
#     group: 'subj'

#     container:
#         config["singularity"]["diffparc"]

#     shell: 'c3d {input.ct} {input.contact_mask} {input.electrode_mask} -xpa {params.n} {params.angle} -xp {output.patches_65} {params.radius_vector} {params.frequency}'